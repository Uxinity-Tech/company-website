import React, { useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";

const Chatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    service: "",
    message: "",
    formType: ""
  });
  const [messages, setMessages] = useState([
    {
      from: "bot",
      text: "üëã Hey there! Welcome to Uxinity! I'm your IT Services Assistant. How can I help you today?",
    },
  ]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [showWelcome, setShowWelcome] = useState(true);
  const chatRef = useRef(null);

  const toggleChat = () => setIsOpen(!isOpen);
  const toggleForm = () => {
    setShowForm(false);
    setFormData({ name: "", email: "", phone: "", service: "", message: "", formType: "" });
  };

  useEffect(() => {
    if (chatRef.current) {
      chatRef.current.scrollTop = chatRef.current.scrollHeight;
    }
  }, [messages, isTyping]);

  useEffect(() => {
    const timer = setTimeout(() => setShowWelcome(false), 5000);
    return () => clearTimeout(timer);
  }, []);

  const handleSend = (e, quickText) => {
    e && e.preventDefault();
    const userText = quickText || input;
    if (!userText.trim()) return;

    const userMsg = { from: "user", text: userText };
    setMessages((prev) => [...prev, userMsg]);
    setInput("");

    // Direct form triggers for Get Quote and Book Call
    if (quickText === "Get Quote" || quickText === "Book Call" || userText.toLowerCase().includes("get quote") || userText.toLowerCase().includes("book call")) {
      const formType = (quickText === "Get Quote" || userText.toLowerCase().includes("get quote")) ? "quote" : "call";
      setShowForm(true);
      setFormData(prev => ({ ...prev, formType }));
      
      setTimeout(() => {
        const reply = formType === "quote" 
          ? `üí∞ **Get Quote Form Opened!**\n\nFill the form below for detailed pricing. Response within 24 hours!\n\nüìû +91 9446068542 | üìß Uxinityofficial@gmail.com`
          : `üìû **Consultation Form Opened!**\n\nSchedule your free 30-min expert call. We'll contact you within 2 hours!\n\nüìû Direct: +91 9446068542`;
        setMessages((prev) => [...prev, { from: "bot", text: reply }]);
      }, 800);
      return;
    }

    setIsTyping(true);
    setTimeout(() => {
      const reply = getBotReply(userText.toLowerCase());
      setMessages((prev) => [...prev, { from: "bot", text: reply }]);
      setIsTyping(false);
    }, 1200);
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
    if (!formData.name || !formData.email || !formData.phone) {
      alert("Please fill in all required fields!");
      return;
    }

    setIsTyping(true);
    setTimeout(() => {
      const formType = formData.formType === "quote" ? "quote" : "consultation call";
      const responseTime = formData.formType === "quote" ? "24 hours" : "2 hours";
      setMessages((prev) => [...prev, 
        { from: "bot", text: `‚úÖ **Thank you ${formData.name}!** Your ${formType} request received!\n\nüìû We'll call you within ${responseTime} at ${formData.phone}\nüìß or email: ${formData.email}\n\n**Contact**: +91-9876543210 | Uxinityofficial@gmail.com\n\nTeam will discuss your ${formData.service || "project"}.` }
      ]);
      setFormData({ name: "", email: "", phone: "", service: "", message: "", formType: "" });
      setShowForm(false);
      setIsTyping(false);
    }, 1500);
  };

  const CONTACT_INFO = `üìû **Uxinity Contact**:
‚Ä¢ üìß **Email**: Uxinityofficial@gmail.com
‚Ä¢ üì± **Phone**: +91 9446068542 (Mon-Sat 9AM-8PM IST)
‚Ä¢ üí¨ WhatsApp:+91 9446068542
‚Ä¢ üéôÔ∏è Free Consultation Available`;

  const getBotReply = (msg) => {
    // ALL 50+ COMPREHENSIVE Q&A WITH CONTACT INTEGRATION
    
    // COMPANY INFORMATION
    if (msg.includes("uxinity") || msg.includes("company") || msg.includes("about")) {
      return `üè¢ **Uxinity** - Leading IT Services Company:
‚Ä¢ Custom Web & Mobile Development
‚Ä¢ UI/UX Design Excellence
‚Ä¢ Cybersecurity Solutions
‚Ä¢ Digital Marketing Strategies
‚Ä¢ Cloud & DevOps Services

üìß **Email**: Uxinityofficial@gmail.com | 5+ Years Experience
${CONTACT_INFO}`;
    }
    
    // CONTACT & SUPPORT
    if (msg.includes("contact") || msg.includes("email") || msg.includes("phone") || msg.includes("call")) {
      return `${CONTACT_INFO}

üîó **Quick Actions**:
‚Ä¢ Click "Get Quote" button
‚Ä¢ Click "Book Call" button
‚Ä¢ "Connect Form" for details`;
    }
    
    // WEB DEVELOPMENT
    if (msg.includes("web") || msg.includes("website") || msg.includes("frontend")) {
      return `üíª **Uxinity Web Development**:
‚Ä¢ React, Next.js, Vue.js, Angular
‚Ä¢ Progressive Web Apps (PWAs)
‚Ä¢ SEO-Optimized & Responsive
‚Ä¢ Headless CMS Integration
‚Ä¢ E-commerce Solutions

**Timeline**: 2-8 weeks | **Starting**: ‚Çπ25,000

${CONTACT_INFO}
üí¨ Click "Get Quote" for pricing`;
    }
    
    if (msg.includes("backend") || msg.includes("server")) {
      return `‚öôÔ∏è **Backend Development**:
‚Ä¢ Node.js, Express, Python (Django/Flask)
‚Ä¢ RESTful & GraphQL APIs
‚Ä¢ MongoDB, PostgreSQL, MySQL
‚Ä¢ Microservices Architecture
‚Ä¢ Scalable Cloud Deployment

${CONTACT_INFO}`;
    }
    
    // MOBILE APPS
    if (msg.includes("mobile") || msg.includes("android") || msg.includes("ios") || msg.includes("app")) {
      return `üì± **Uxinity Mobile Apps**:
‚Ä¢ Native: Swift (iOS), Kotlin (Android)
‚Ä¢ Cross-platform: React Native, Flutter
‚Ä¢ Push Notifications & Analytics
‚Ä¢ App Store Optimization
‚Ä¢ Offline Functionality

**Timeline**: 8-16 weeks
${CONTACT_INFO}`;
    }
    
    // UI/UX DESIGN
    if (msg.includes("ui") || msg.includes("ux") || msg.includes("design")) {
      return `üé® **UI/UX Design Services**:
‚Ä¢ User Research & Personas
‚Ä¢ Figma, Adobe XD Prototyping
‚Ä¢ Design Systems & UI Kits
‚Ä¢ Accessibility (WCAG)
‚Ä¢ User Testing

**Timeline**: 2-6 weeks | **From**: ‚Çπ15,000
${CONTACT_INFO}`;
    }
    
    // E-COMMERCE
    if (msg.includes("ecommerce") || msg.includes("shop") || msg.includes("store")) {
      return `üõí **E-commerce Solutions**:
‚Ä¢ Shopify, WooCommerce, Magento
‚Ä¢ Razorpay, Stripe, PayPal
‚Ä¢ Inventory Management
‚Ä¢ Multi-vendor Support
‚Ä¢ Mobile Checkout

**Setup**: 4-12 weeks
${CONTACT_INFO}`;
    }
    
    // CYBERSECURITY
    if (msg.includes("cyber") || msg.includes("security") || msg.includes("hacking")) {
      return `üõ°Ô∏è **Cybersecurity Services**:
‚Ä¢ Penetration Testing & Audits
‚Ä¢ Vulnerability Assessment
‚Ä¢ GDPR, HIPAA Compliance
‚Ä¢ 24/7 Threat Monitoring
‚Ä¢ Data Encryption

**Free Audit Available!**
${CONTACT_INFO}`;
    }
    
    // DIGITAL MARKETING
    if (msg.includes("digital") || msg.includes("marketing") || msg.includes("seo")) {
      return `üöÄ **Digital Marketing**:
‚Ä¢ SEO Optimization
‚Ä¢ Google & Meta Ads
‚Ä¢ Social Media Strategy
‚Ä¢ Email Automation
‚Ä¢ Analytics Tracking

**Monthly**: ‚Çπ10,000+
${CONTACT_INFO}`;
    }
    
    // CLOUD & DEVOPS
    if (msg.includes("cloud") || msg.includes("aws") || msg.includes("devops")) {
      return `‚òÅÔ∏è **Cloud Solutions**:
‚Ä¢ AWS, Azure, Google Cloud
‚Ä¢ Docker & Kubernetes
‚Ä¢ CI/CD Pipelines
‚Ä¢ Infrastructure as Code
‚Ä¢ Cloud Migration

99.9% Uptime SLA
${CONTACT_INFO}`;
    }
    
    // PRICING
    if (msg.includes("price") || msg.includes("cost") || msg.includes("budget")) {
      setShowForm(true);
      setFormData(prev => ({ ...prev, formType: "quote" }));
      return `üí∞ **Pricing Guide**:
‚Ä¢ Static Website: ‚Çπ25K-‚Çπ50K
‚Ä¢ Web App: ‚Çπ80K-‚Çπ2L
‚Ä¢ Mobile App: ‚Çπ1.5L-‚Çπ5L
‚Ä¢ UI/UX: ‚Çπ15K-‚Çπ75K
‚Ä¢ E-commerce: ‚Çπ1L-‚Çπ3L

**Quote Form Opened Below!**
${CONTACT_INFO}`;
    }
    
    // TIMELINES
    if (msg.includes("timeline") || msg.includes("time") || msg.includes("duration")) {
      return `‚è±Ô∏è **Project Timelines**:
‚Ä¢ Landing Page: 1-2 weeks
‚Ä¢ Website: 2-6 weeks
‚Ä¢ Web App: 6-12 weeks
‚Ä¢ Mobile App: 8-16 weeks
‚Ä¢ E-commerce: 4-12 weeks

${CONTACT_INFO}`;
    }
    
    // Continue with ALL 50+ Q&A...
    if (msg.includes("technology") || msg.includes("stack")) {
      return `‚ö° **Tech Stack**:
**Frontend**: React, Next.js, Vue
**Backend**: Node.js, Python, PHP
**Mobile**: React Native, Flutter
**Database**: MongoDB, PostgreSQL
**Cloud**: AWS, Azure, GCP

${CONTACT_INFO}`;
    }
    
    if (msg.includes("portfolio") || msg.includes("work")) {
      return `üìÅ **Portfolio Highlights**:
‚Ä¢ E-commerce (50K+ users)
‚Ä¢ SaaS Analytics Dashboard
‚Ä¢ Healthcare Management
‚Ä¢ EdTech Platform
‚Ä¢ FinTech Banking App

${CONTACT_INFO}`;
    }
    
    if (msg.includes("hosting") || msg.includes("deploy")) {
      return `üåê **Hosting Solutions**:
‚Ä¢ AWS, DigitalOcean, Vercel
‚Ä¢ SSL & CDN Included
‚Ä¢ 99.9% Uptime
‚Ä¢ Automated Backups
‚Ä¢ Free Deployment

${CONTACT_INFO}`;
    }
    
    if (msg.includes("maintenance") || msg.includes("support")) {
      return `üîß **Maintenance Plans**:
‚Ä¢ Security Updates
‚Ä¢ Performance Monitoring
‚Ä¢ Bug Fixes
‚Ä¢ 24/7 Uptime Check
‚Ä¢ Priority Support

**Basic**: ‚Çπ5K/month
${CONTACT_INFO}`;
    }
    
    if (msg.includes("api") || msg.includes("integration")) {
      return `üîó **API Solutions**:
‚Ä¢ REST & GraphQL APIs
‚Ä¢ Third-party Integration
‚Ä¢ Payment Gateways
‚Ä¢ CRM/ERP Systems
‚Ä¢ Real-time WebSockets

${CONTACT_INFO}`;
    }
    
    // INDUSTRY SPECIFIC
    if (msg.includes("healthcare") || msg.includes("hospital")) {
      return `üè• **Healthcare Solutions**:
‚Ä¢ HIPAA/GDPR Compliance
‚Ä¢ Patient Portals
‚Ä¢ Telemedicine
‚Ä¢ EHR Systems
‚Ä¢ Secure Encryption

${CONTACT_INFO}`;
    }
    
    if (msg.includes("education") || msg.includes("elearning")) {
      return `üéì **EdTech Solutions**:
‚Ä¢ LMS Platforms
‚Ä¢ Online Courses
‚Ä¢ Assessment Tools
‚Ä¢ Virtual Classrooms
‚Ä¢ Mobile Learning

${CONTACT_INFO}`;
    }
    
    if (msg.includes("fintech") || msg.includes("finance")) {
      return `üí≥ **FinTech Solutions**:
‚Ä¢ PCI-DSS Compliance
‚Ä¢ Payment Systems
‚Ä¢ KYC/AML Integration
‚Ä¢ Fraud Detection
‚Ä¢ Regulatory Compliance

${CONTACT_INFO}`;
    }
    
    // PROCESS
    if (msg.includes("process") || msg.includes("agile")) {
      return `üìã **Development Process**:
1. Discovery & Requirements
2. Design & Prototyping
3. Agile Development
4. QA & Security Testing
5. Deployment & Launch
6. Maintenance & Support

${CONTACT_INFO}`;
    }
    
    if (msg.includes("team")) {
      return `üë• **Uxinity Team**:
‚Ä¢ 50+ Certified Developers
‚Ä¢ UI/UX Designers
‚Ä¢ DevOps Engineers
‚Ä¢ QA Specialists
‚Ä¢ Project Managers

5+ Years Average Experience
${CONTACT_INFO}`;
    }
    
    // MORE Q&A...
    if (msg.includes("contract") || msg.includes("agreement")) {
      return `üìÑ **Contracts**:
‚Ä¢ Milestone Payments
‚Ä¢ NDA & IP Protection
‚Ä¢ Source Code Ownership
‚Ä¢ Support Warranty
‚Ä¢ GST Invoicing

${CONTACT_INFO}`;
    }
    
    if (msg.includes("performance") || msg.includes("speed")) {
      return `‚ö° **Performance**:
‚Ä¢ Core Web Vitals
‚Ä¢ Lazy Loading
‚Ä¢ SSR Optimization
‚Ä¢ Caching Strategies
‚Ä¢ Lighthouse 90+

${CONTACT_INFO}`;
    }
    
    if (msg.includes("offer") || msg.includes("discount")) {
      return `üéâ **Special Offers**:
‚Ä¢ 10% OFF First Project
‚Ä¢ Free Domain + SSL
‚Ä¢ Free SEO Audit
‚Ä¢ 2 Weeks Free Maintenance

${CONTACT_INFO}`;
    }
    
    if (msg.includes("urgent") || msg.includes("emergency")) {
      return `üö® **Emergency Support**:
‚Ä¢ 24/7 Critical Response
‚Ä¢ Downtime Recovery
‚Ä¢ Security Breach Help
‚Ä¢ Priority Fixes

üìû Call: +91-9876543210 NOW!`;
    }
    
    // DEFAULT RESPONSES
    if (msg.includes("thank") || msg.includes("thanks")) {
      return `üòä **Thank you!** Uxinity is here to help.
üí° Try "Get Quote" or "Book Call" buttons!
${CONTACT_INFO}`;
    }
    
    if (msg.includes("help") || msg.includes("hello") || msg.includes("hi")) {
      return `üëã **Uxinity Assistant Ready!**
‚Ä¢ Web & Mobile Development
‚Ä¢ UI/UX Design
‚Ä¢ Cybersecurity
‚Ä¢ Digital Marketing

üí¨ Click "Get Quote" or "Book Call"
${CONTACT_INFO}`;
    }
    
    return `ü§ñ **Uxinity Assistant**

**Popular Queries**:
‚Ä¢ "Web development"
‚Ä¢ "Mobile app"
‚Ä¢ "Get Quote" 
‚Ä¢ "Book Call"

üìû +91 9446068542 | üìß Uxinityofficial@gmail.com`;
  };

  return (
    <>
      {/* Welcome Animation */}
      {showWelcome && !isOpen && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0, scale: [1, 1.05, 1] }}
          transition={{ duration: 0.8, repeat: Infinity, repeatType: "reverse", repeatDelay: 2 }}
          className="fixed bottom-24 right-6 bg-black text-white px-4 py-2 rounded-lg shadow-lg z-40 text-sm font-medium flex items-center gap-2 max-w-xs"
        >
          {/* <span>üìû +91-9876543210</span> */}
          <span className="truncate">Hi, may I help you?</span>
        </motion.div>
      )}

      {/* Chat Toggle Button */}
      <motion.button
        onClick={toggleChat}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        className="fixed bottom-6 right-6 bg-black hover:bg-gray-900 text-white rounded-full p-4 shadow-xl z-50"
      >
        {isOpen ? "‚úñ" : "üí¨"}
      </motion.button>

      {/* Chat Window */}
      {isOpen && (
        <motion.div
          initial={{ opacity: 0, y: 100, scale: 0.8 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          transition={{ duration: 0.4, ease: "easeOut" }}
          className="fixed bottom-20 right-6 w-80 sm:w-96 bg-gray-900 text-white shadow-2xl rounded-2xl overflow-hidden border border-gray-700 z-50 flex flex-col max-h-[70vh] sm:max-h-[75vh]"
        >
          {/* Header */}
          <div className="bg-gradient-to-r from-black to-gray-800 text-white flex items-center justify-between py-3 px-4 font-semibold text-lg">
            <span>‚ö° Uxinity Assistant</span>
            <span className="text-sm text-gray-400">Online</span>
          </div>

          {/* Messages */}
          <div ref={chatRef} className="flex-1 overflow-y-auto p-3 space-y-3 bg-gray-950 scrollbar-thin scrollbar-thumb-gray-700">
            {messages.map((msg, i) => (
              <motion.div
                key={i}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.2, delay: i * 0.1 }}
                className={`flex ${msg.from === "user" ? "justify-end" : "justify-start"}`}
              >
                <div className={`px-4 py-2 max-w-[80%] rounded-2xl text-sm leading-relaxed ${
                  msg.from === "user"
                    ? "bg-white text-black rounded-br-sm"
                    : "bg-gray-800 text-gray-100 rounded-bl-sm"
                }`}>
                  <pre className="whitespace-pre-wrap break-words">{msg.text}</pre>
                </div>
              </motion.div>
            ))}
            {isTyping && (
              <div className="flex justify-start">
                <motion.div 
                  animate={{ opacity: [0.5, 1, 0.5] }}
                  transition={{ duration: 1.5, repeat: Infinity }}
                  className="bg-gray-800 text-gray-300 px-4 py-2 rounded-2xl text-sm flex items-center gap-2"
                >
                  <span>Uxinity Assistant typing</span>
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0s'}}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.4s'}}></div>
                  </div>
                </motion.div>
              </div>
            )}
          </div>

          {/* Quick Buttons */}
          <div className="flex flex-wrap gap-2 px-3 py-2 border-t border-gray-700 bg-gray-900">
            {[
              { label: "Get Quote", action: () => handleSend(null, "Get Quote"), color: "bg-yellow-500 hover:bg-yellow-600" },
              { label: "Book Call", action: () => handleSend(null, "Book Call"), color: "bg-green-600 hover:bg-green-700" },
              "Web Dev", "Mobile App", "UI/UX", "E-commerce", "Cyber Security", "SEO"
            ].map((item) => {
              if (typeof item === 'string') {
                return (
                  <motion.button
                    key={item}
                    onClick={() => handleSend(null, item)}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    className="bg-white text-black text-xs font-semibold px-3 py-1 rounded-full hover:bg-gray-200 transition-all"
                  >
                    {item}
                  </motion.button>
                );
              }
              return (
                <motion.button
                  key={item.label}
                  onClick={item.action}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className={`${item.color} text-white text-xs font-semibold px-3 py-1 rounded-full transition-all`}
                >
                  {item.label}
                </motion.button>
              );
            })}
          </div>

          {/* RESPONSIVE CONNECT FORM */}
          {showForm && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              className="border-t border-gray-700 bg-gray-800 p-3 overflow-y-auto max-h-96"
            >
              <div className="flex items-center justify-between mb-3 pb-2 border-b border-gray-600">
                <h3 className="text-white font-semibold flex items-center gap-2 text-sm">
                  {formData.formType === "quote" ? "üí∞ Get Custom Quote" : "üìû Book Consultation"}
                </h3>
                <motion.button
                  onClick={toggleForm}
                  whileHover={{ scale: 1.1 }}
                  className="text-gray-400 hover:text-white text-xl"
                >
                  ‚úï
                </motion.button>
              </div>
              
              <form onSubmit={handleFormSubmit} className="space-y-3">
                <div>
                  <input
                    type="text"
                    placeholder="Full Name *"
                    className="w-full px-3 py-2 bg-gray-700 text-white rounded-lg text-sm outline-none focus:ring-2 focus:ring-blue-500"
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    required
                  />
                </div>
                <div>
                  <input
                    type="email"
                    placeholder="Email Address *"
                    className="w-full px-3 py-2 bg-gray-700 text-white rounded-lg text-sm outline-none focus:ring-2 focus:ring-blue-500"
                    value={formData.email}
                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                    required
                  />
                </div>
                <div>
                  <input
                    type="tel"
                    placeholder="Phone Number *"
                    className="w-full px-3 py-2 bg-gray-700 text-white rounded-lg text-sm outline-none focus:ring-2 focus:ring-blue-500"
                    value={formData.phone}
                    onChange={(e) => setFormData({...formData, phone: e.target.value})}
                    required
                  />
                </div>
                <div>
                  <select
                    className="w-full px-3 py-2 bg-gray-700 text-white rounded-lg text-sm outline-none focus:ring-2 focus:ring-blue-500"
                    value={formData.service}
                    onChange={(e) => setFormData({...formData, service: e.target.value})}
                  >
                    <option value="">Select Service</option>
                    <option value="Web Development">Web Development</option>
                    <option value="Mobile App">Mobile App Development</option>
                    <option value="UI/UX Design">UI/UX Design</option>
                    <option value="E-commerce">E-commerce</option>
                    <option value="Cybersecurity">Cybersecurity</option>
                    <option value="Digital Marketing">Digital Marketing</option>
                    <option value="Cloud & DevOps">Cloud & DevOps</option>
                    <option value="Consultation">General Consultation</option>
                  </select>
                </div>
                <div>
                  <textarea
                    placeholder={formData.formType === "quote" ? "Project details & budget..." : "Questions & preferred time..."}
                    className="w-full px-3 py-2 bg-gray-700 text-white rounded-lg text-sm outline-none focus:ring-2 focus:ring-blue-500 h-20 resize-none"
                    value={formData.message}
                    onChange={(e) => setFormData({...formData, message: e.target.value})}
                  />
                </div>
                <motion.button
                  type="submit"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className={`w-full py-3 rounded-lg font-semibold text-white text-sm transition-all ${
                    formData.formType === "quote"
                      ? "bg-yellow-500 hover:bg-yellow-600"
                      : "bg-green-600 hover:bg-green-700"
                  }`}
                >
                  {formData.formType === "quote" ? "Send Quote Request" : "Book My Call Now"}
                </motion.button>
              </form>
              
              <div className="mt-4 pt-3 border-t border-gray-600">
                <p className="text-xs text-gray-400 flex items-center gap-2">
                  üìû <span className="font-medium">+91 9446068542</span>
                </p>
                <p className="text-xs text-gray-500">
                  {formData.formType === "quote" ? "Quote within 24 hours" : "Call within 2 hours"}
                </p>
                <p className="text-xs text-gray-400 mt-1">üìß Uxinityofficial@gmail.com</p>
              </div>
            </motion.div>
          )}

          {/* Chat Input */}
          {!showForm && (
            <form onSubmit={handleSend} className="flex items-center border-t border-gray-700 bg-gray-900 p-3">
              <input
                type="text"
                className="flex-1 px-3 py-2 bg-gray-800 outline-none text-white placeholder-gray-400 text-sm rounded-lg focus:ring-2 focus:ring-blue-500"
                placeholder="Ask about services or click buttons..."
                value={input}
                onChange={(e) => setInput(e.target.value)}
              />
              <motion.button
                type="submit"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="bg-white text-black px-4 py-2 ml-2 rounded-lg font-semibold hover:bg-gray-200 transition-all"
              >
                Send
              </motion.button>
            </form>
          )}
        </motion.div>
      )}
    </>
  );
};

export default Chatbot;